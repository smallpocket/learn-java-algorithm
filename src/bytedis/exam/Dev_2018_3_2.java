package bytedis.exam;

/**
 * @author Heper
 * @title
 * @date 2019/3/15 23:14
 */
public class Dev_2018_3_2 {
    /**
     *
     * 二阶魔方，有三个轴，定义为xyz
     * x轴转动，默认一个方向，反向的话就是默认转三次嘛！
     * 函数有两个参数move(revolve_dir,times),分别是转的轴，和转的次数！
     * self.list为存储值的列表，这里python可以使用dic来存储键值对，但是tuple就不行啦！
     * 每次都是操作这个list，最终返回list
     * 每个面的优美度就是面的乘积，时间问题，我只考虑了正数的可能，每个面的正数和越大（每个数都不同的情况下），带0的面的和越小，总优美度就越大，或者直接平方，计算机处理平方速度快，平方就是地址后移，没移一次计算一次总优美度，最终得出结论
     */
}
